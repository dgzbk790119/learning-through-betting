## **<u>python编程快速上手  作业2-1</u>**

### 1、布尔值数据类型是什么？如何拼写？

布尔值数据类型是一种逻辑类型，它只有两个值：True 和 False。它通常用于控制程序的流程和逻辑判断。在 Python 中，True 和 False 都是关键字，表示布尔值 True 和 False。注意，Python中的True和False拼写不区分大小写，也就是说，你可以使用 True 或 TRUE 来表示布尔值 True。同样的，你也可以使用 False 或 FALSE 来表示布尔值 False。但是，在编写代码时，建议使用小写字母来表示布尔值。例如：

```
is_student = True
is_teacher = False
```

在上面的代码中，变量 is_student 被赋值为 True，表示该变量存储的是一个布尔值；变量 is_teacher 被赋值为 False，也表示它是一个布尔值。

### 2、3个布尔操作符是什么？

Python中常用的布尔操作符有3个，它们分别是：

1. `and` 操作符：当它左右两边的表达式都为True时，它的结果才为True，否则为False。
2. `or` 操作符：当它左右两边的表达式有一个为True时，它的结果就为True，否则为False。
3. `not` 操作符：它是一个一元操作符，它返回True的表达式结果取反的值，即如果表达式的值为True，那么 `not` 操作符返回False，反之，返回True。

这些布尔操作符可以用于组合多个布尔表达式，从而实现复杂的逻辑判断。在编写逻辑表达式时，你可以使用圆括号来改变表达式的优先级，以使自己的代码更加清晰易懂。例如：

```
is_student = True
is_graduate = False
is_female = True

if is_student and is_female:
    print("This is a female student.")
elif is_student and not is_female:
    print("This is a male student.")
else:
    print("This is not a student.")
```

上述代码中，通过使用 `and`，`or` 和 `not` 操作符，组合了三个布尔表达式，根据这些表达式的值输出相应的提示信息。这是 Python 语言编写逻辑判断程序的一个简单例子。

### 3、写出每个布尔值操作符的真值表。

布尔操作符的真值表如下：

1. `and` 操作符：

| 操作数1 | 操作数2 | 结果  |
| ------- | ------- | ----- |
| False   | False   | False |
| False   | True    | False |
| True    | False   | False |
| True    | True    | True  |

1. `or` 操作符：

| 操作数1 | 操作数2 | 结果  |
| ------- | ------- | ----- |
| False   | False   | False |
| False   | True    | True  |
| True    | False   | True  |
| True    | True    | True  |

1. `not` 操作符：

| 操作数 | 结果  |
| ------ | ----- |
| False  | True  |
| True   | False |

以上真值表描述了使用布尔操作符时，在不同的操作数下操作符的结果布尔值。

### 4、表达式结果是什么？

（5>4）and(3==5)  True

not (5>4) False

（5>4) or(3==5) True

(True and True) and (True ==False)  False

(not False) or(not True) True

###  5、6个比较操作符是什么？

Python 中常用的比较操作符有 6 个，它们分别是：

1. `>`：大于，用于比较两个值的大小关系，当左边的数值大于右边的数值时，返回 True，否则返回 False。
2. `<`：小于，用于比较两个值的大小关系，当左边的数值小于右边的数值时，返回 True，否则返回 False。
3. `>=`：大于等于，用于比较两个值的大小关系，当左边的数值大于或等于右边的数值时，返回 True，否则返回 False。
4. `<=`：小于等于，用于比较两个值的大小关系，当左边的数值小于或等于右边的数值时，返回 True，否则返回 False。
5. `==`：等于，用于比较两个值是否相等，当两个数值相等时，返回 True，否则返回 False。
6. `!=`：不等于，用于比较两个值是否不相等，当两个数值不相等时，返回 True，否则返回 False。

这些比较操作符经常用于条件语句和循环语句中，在使用它们的过程中需要注意变量类型的匹配问题以及比较对象是否为同一类型。

### 6、等于操作符和赋值操作符的区别是什么？

等于操作符 “==” 用于比较两个数值或对象是否相等，返回一个布尔值（True 或 False）。它只用于比较，而不会修改任何变量的值。比如:

```
a = 10
b = 10
print(a == b)  # True
```

这里的“==”操作符用于比较 a 和 b 两个变量的值，这个比较操作不会修改 a 或 b 的值。

赋值操作符 " = " 用于将一个值或表达式赋值给变量，这个操作会改变变量的值。比如：

```
a = 10
b = 5
a = b
print(a)  # 5
```

这里的“ = ”用于将变量 b 的值赋值给变量 a，这个赋值操作会改变变量 a 的值为 5。

需要注意的是，在 Python 中使用“==”操作符比较对象时，如果对象是可变类型（如列表、字典、集合等），则比较的是两个对象所引用的内存地址是否相同，而非两个对象的值是否相同。若要比较对象值是否相同，可以使用深度比较函数，如`import copy; copy.deepcopy(var1) == copy.deepcopy(var2)`。若对象是不可变类型（如字符串、元组、数值等），则比较的是两个对象的值是否相同。

### 7、解释什么是条件？可以在那使用条件？

条件是一个判断表达式或布尔值，用于根据表达式的结果或布尔值的真假来决定程序的执行路径。在 Python 中，我们可以使用条件语句来根据条件执行不同的代码块。

条件语句可以在许多情况下使用。例如：

1. 在流程控制语句（如 if 语句、while 循环、for 循环）中，根据不同的条件执行不同的代码，实现程序的逻辑控制。
2. 在函数中，根据不同的条件执行不同的代码，返回不同的值或实现不同的业务逻辑。
3. 在模块或库中，调用其他模块或库的函数时，可以给函数传递不同的参数，根据参数值的不同，在函数内部执行不同的代码，返回不同的结果。

例如，下面这个例子中的 `if` 语句中的条件语句 `x > 0` 就用于根据变量 `x` 的值，决定程序执行不同的分支：

```
x = 10
if x > 0:
    print("x is positive")
else:
    print("x is not positive")
```



这里条件 `x > 0` 返回的是布尔值 True，如果 `x` 的值大于 0，程序会执行 `print("x is positive")` 中的代码，否则执行 `print("x is not positive")` 中的代码。

总之，条件是程序中用于决定程序执行路径的关键因素，使用条件语句可以实现不同条件下的程序逻辑。
### 8、识别这段代码中的三名语句块：

spam = 0

if spam == 10:

​	print('wggs')

​	if spam >5:

​		print('bacon')

​	else:

​			print('ham')

​	print('spam')

print('spam')

**第一个语句块是 `spam = 0`，它将变量 `spam` 的值设置为 0。第二个语句块是一个 `if` 语句，其中包含了几个缩进的代码行。它检查变量 `spam` 的值是否等于 10，如果是，则打印 `'wggs'`。如果 `spam` 大于 5，则还会打印 `'bacon'`，否则将打印 `'ham'` 和 `'spam'`。第三个语句块是 `print('spam')`，它将打印字符串 `'spam'`，不管第二个语句块是否执行。**

### 9、编写代码，如果变量朴spamk中存放1，就会输出Hello ,如果变量中存放2，就会输出Howdy，如果变量中存放其他值，就输出Greetings

你可以使用一个简单的条件语句来实现这个功能。以下是使用 Python 编写的示例代码：

```
spam = int(input('请输入一个数字：'))

if spam == 1:
    print('Hello')
elif spam == 2:
    print('Howdy')
else:
    print('Greetings')
```



首先，该代码会要求用户输入一个数字，并将其存储在变量 `spam` 中。然后，条件语句检查变量的值是否等于 1 或 2，如果是，则分别输出 `'Hello'` 或 `'Howdy'`。如果变量值不是 1 或 2，则将输出 `'Greetings'`。注意，我们使用 `int()` 函数将输入转换为整数类型，以确保可以进行数字比较。

### 10、如果程序中陷入一个无限的循环中，你可以按那个退出呢

当程序陷入无限循环时，你可以按下键盘上的 `Ctrl+C` 来强制终止程序。在大多数情况下，这将会停止程序的执行并退出循环。

在某些情况下，如果程序运行得过于缓慢或出现其他问题，可以尝试使用 `Ctrl+\`，它类似于 `Ctrl+C`，但会生成一个类似于 `SIGQUIT` 的异常信号，导致程序退出并打印堆栈跟踪信息。这通常比 `Ctrl+C` 更强制，因为它不仅会停止程序，还会打印一些关于所发生异常的有用信息。

### 11、break 和tcontinue语句有什么区别？

`break` 和 `continue` 都是用于控制循环执行的语句，它们的功能不同。

`break` 用于跳出循环，即在满足某个条件时提前结束整个循环，执行循环后面的代码。当程序执行到 `break` 语句时，循环体内的代码立即停止执行，并跳出循环。通常是在在满足某个条件时，不再执行循环的剩余代码，而将程序执行权转到循环后面的代码。

举个例子：

```python
for i in range(1, 6):
    if i == 3:
        break
    print(i)
```

输出结果为：

```
1
2
```

可以看到当 for 循环执行到 `i == 3` 时，`break` 跳出循环，不再执行循环的剩余代码。

`continue` 用于结束当前这一次循环，继续执行下一次循环的语句，即，当程序执行到 `continue` 语句时，当前循环的剩余代码不再执行，跳过当前循环的余下代码，直接从下一个迭代开始执行循环。

举个例子：

```python
for i in range(1, 6):
    if i == 3:
        continue
    print(i)
```

输出结果为：

```
1
2
4
5
```

可以看到当 for 循环执行到 `i == 3` 时，`continue` 跳出当前循环，不再执行当前循环的剩余代码，但继续执行下一次循环，即从 `i=4` 开始执行循环。

### 12、在for 循环中，range(10)   range(0,10)   range(0,10,1)之间的区别是什么？

 这三个表达式的结果都是相同的，都是生成从0到9的整数序列。range(10)和range(0,10)都是默认步长为1，而range(0,10,1)则显式指定步长为1。

### 13、编写一小段程序，利用for循环输出从1到10的数字，然后利用while 循环编写一个等价程序，输出从1到10的数字。

使用 for 循环输出从 1 到 10 的数字可以如下编写：

```python
for i in range(1, 11):
    print(i)
```

输出结果：

```
1
2
3
4
5
6
7
8
9
10
```

使用 while 循环输出从 1 到 10 的数字可以如下编写：

```python
i = 1
while i <= 10:
    print(i)
    i += 1
```

输出结果：

```
1
2
3
4
5
6
7
8
9
10
```

可以看出，通过 while 循环实现与 for 循环相同的迭代是非常直接的，只需要使用一个计数器变量，并在循环体内将其递增，就可以实现类似的结果。

### 14、如果名为spam 模块中，有一个名叫bacon()的函数，那么在导入spam模块后，如何调用它？

在导入模块 `spam` 后，可以使用点操作符（`.`）来访问其中的函数 `bacon()`，具体的调用方式如下：

```python
import spam

# 使用模块名和函数名进行调用
spam.bacon()
```

如果要调用时不想输入太长的名称，还可以使用 `as` 关键字给模块或函数起一个别名，比如：

```python
import spam as s

# 使用模块别名和函数名进行调用
s.bacon()
```

或者直接将函数名导入到当前命名空间中：

```python
from spam import bacon

# 直接使用函数名进行调用
bacon()
```

不管是使用模块名和函数名，还是使用别名和函数名，均可用于调用模块中的 `bacon()` 函数。

### 15、round和abs函数的作用，在交互式环境中如何使用他们。

`round()` 和 `abs()` 是 Python 内置函数，其作用分别为：

- `round(x[, n])`: 对浮点数 x 四舍五入，并返回一个根据给定精度 n 转换为的值。如果省略 n，则默认 n=0，即取整数。如果 x 在两个数的正中间，则四舍五入到最接近的偶数。
- `abs(x)`: 返回数值的绝对值，即去除数值的符号部分，返回其正值。

在交互式环境中，可以直接使用这两个函数，并查看其返回值，类似于下面的示例：

```python
# 使用 round() 将浮点数四舍五入到2位小数
>>> round(3.14159, 2)
3.14

# 使用 round() 取整数
>>> round(3.8)
4

# 使用 abs() 返回数的绝对值
>>> abs(-3.14)
3.14

# 使用 abs() 返回正数的值
>>> abs(-5)
5
```

可以看到，在交互式环境中直接使用这两个函数是非常方便的，同时在调试和探索数据时这些函数可以起到非常重要的作用，并且由于它们是 Python 内置函数，所以无需导入任何额外的模块或包即可使用。
